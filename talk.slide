Go Try It!
10 Reasons To Try Go in 10 Minutes
Tags: go, lightning

Aidan Coyle
Software Engineering Intern
acoyle@enova.com
https://github.com/packrat386/go-lightning-talk
@packrat386

* #1: Go is Explicit

State your thoughts clearly and catch errors early

- No unused variables, arguments, or imports
  val, err := someFaultyFunction();
  return val;
  /* seems like perhaps we're forgetting something */

- No function overloading or optional parameters
  def calc_score(name, team=nil, *games, field)
    # This is straight out of Well Groomed Rubyist
    # Don't ask me how to call it
  end

- No magic is good magic

* #2: Strong Static Typing

Don't accept what you don't expect

- Strict type system
  func PrintString(s string) {}

  var u url.URL
  u.Parse("http://localhost:8080/")
  PrintString(u) /* won't compile */
  PrintString(string(u)) /* still won't compile */
  PrintString(u.String()) /* now we know what we're getting */

- Interfaces allow for static duck typing
  /* ioutil.ReaderWriter */
  type ReadWriter interface {
          Read(p []byte) (n int, err error)
       	  Write(p []byte) (n int, err error)
  }

* #3: Trickle up Errors

Effective error handling idioms

- Handle the errors we can
  c, err := ReadConfig("config.json")
  if err != nil {
          /* If we couldn't read it, give them the default */
     	  c = Config{}
  }

- Pass back the errors we can't
  db, err := MakeDbConnection("localhost:5678")
  if err != nil {
     	  /* Maybe our caller knows how to handle this */
     	  return nil, err
  }

* #4: Concurrency

Writing concurrent code shouldn't be hard

- Goroutines make asynchronous calls easy
  /* Lets say we want to make 8 connections at once */
  for i := 0; i < 8; i++ {
          go makeConn();
  }
  /* ... Well that was easy */

- Channels make it possible to pass information between those processes and sync them if necessary
  func doAsyncThings() {
          sigChan := make(chan int);
  	  go someAsyncProcess(sigChan); /* Just need to give the process a copy of the channel */
  	  1 -> sigChan; /* We can send it whatever data it might need from us */
  	  doSomeStuff();
  	  <- sigChan; /* We can sync our process up with theirs by waiting for a signal */ 
  	  return;
  }

* #5: Standard Library

Built in functionality for common uses

- Network package for making requests and/or setting up a server
- OS package for dealing with file I/O or external calls
- Encoding package for parsing various different kinds of files
- Log package for ... loggging
- And so much more!

* #6: External Libraries

Don't reinvent the wheel

- go get can be called on public repo's of many code sharing platforms, and it imports that code according to path conventions
  $ go get github.com/packrat386/relay 	   	     /* A real repo! */
  $ cd $GOPATH/src/github.com/packrat/relay
  $ ls
  config.json.example  LICENSE  main.go  main_test.go  Makefile  README.md

- go get can also be used to update/get dependencies
  $ go get -d -u ./... /* this will get updated versions of all current dependencies */

* #7: Static Code Analysis

Find the bugs before users do

- gofmt standardizes formatting across files and authors
  # put this in your travis.yml
  test -z $(gofmt -l .)
  # never worry about tabs vs spaces again

- go vet catches possible errors that still compile
  $ go vet bad.go
  bad.go:10: unreachable code
  bad.go:7: self-assignment of mystr to mystr
  exit status 1

- The compiler is an excellent static code analysis tool

* #8: Tests

Testing is easy and integrated

- go test's basic functionality is to run all the tests, detected by naming convention
  $ go test
  PASS
  ok  	github.com/packrat386/somerepo	0.185s

- go test has built in options for benchmarking, code coverage, and race detection among other things
  $ go test -race      	       	   		      /* run tests with race detection */
  PASS
  ok  	github.com/packrat386/somerepo	1.676s
  $ go test -coverprofile=coverage.out		      /* run tests with code coverage */
  PASS
  coverage: 65.1% of statements
  ok  	github.com/packrat386/relay	0.151s
  $ go tool cover -html=coverage.out		      /* view html representation of code coverage */

* #9: Ship Easily

Compilation and execution simplified

- go run attempts to compile and then execute code
  $ go run main.go 
  Hello World!
  # No makefiles, rakefiles or build tools required

- go install compiles an easily exportable binary
  $ pwd
  /Users/acoyle/go/src/git.enova.com/go/golios
  $ go install	
  $ golios
  [helios] 2015/06/11 21:39:03 Serving [::]:3000 with pid 1829

* #10: Documentation

All the documentation, none of the @ signs

- Comments directly on top of functions and packages define the documentation for them
  // Utility is a package of useful functions that I need sometimes
  package Utility

  // HelloWorld is a function that prints hello world
  func HelloWorld() {
          fmt.Println("Hello World");
  } 

  // Redundant is a function that does addition
  func Redundant(a int,  b int) int {
          return a + b;
  }

- The godoc command generates outputs that documentation in many forms, including html
- godoc can be run as a local server, documenting all the go code it can find

* But wait there's more!

All the features, none of the (hardware) cost

.image chartvs.png
.caption Pictured here, Go trouncing Ruby in benchmark tests

Although it doesn't always feel like it, Go is a compiled language, which for our purposes means it's fast

* Want to learn more?

- Check out the Go channel on HipChat
- Go to http://golang.org/
- Y'all know how to use google